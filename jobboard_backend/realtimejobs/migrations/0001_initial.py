# Generated by Django 5.1.6 on 2025-03-04 10:02

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, max_length=100, unique=True)),
                ('slug', models.SlugField(unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, help_text='Company name (must be unique).', max_length=255, unique=True)),
                ('logo', models.ImageField(blank=True, help_text='Company logo image file (optional).', null=True, upload_to='company_logos/')),
                ('description', models.TextField(blank=True, help_text='Optional company description.', null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp of the last update.')),
                ('contact_name', models.CharField(help_text='Full name of the contact person.', max_length=255)),
                ('contact_email', models.EmailField(db_index=True, help_text='User email for contact purposes.', max_length=254, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='JobType',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, help_text='Tag name for categorizing jobs.', max_length=100, unique=True)),
                ('slug', models.SlugField(help_text='SEO-friendly identifier for the tag.', unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(db_index=True, help_text="User's unique email address, used for login.", max_length=254, unique=True)),
                ('full_name', models.CharField(help_text="User's full name (first and last name).", max_length=255)),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Indicates whether the user account is active.')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether this user can access the admin site.')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when the user was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the user was last updated.')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='JobPost',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('job_url', models.TextField(db_index=True, help_text='Direct URL to the job post.')),
                ('title', models.CharField(db_index=True, help_text='Job title.', max_length=255)),
                ('slug', models.SlugField(help_text='SEO-friendly identifier for the job.', unique=True)),
                ('location', models.CharField(blank=True, db_index=True, help_text='Job location (or NULL if worldwide).', max_length=255, null=True)),
                ('is_worldwide', models.BooleanField(db_index=True, default=False, help_text='True if the job is remote.')),
                ('salary', models.CharField(blank=True, help_text="Salary range (e.g., '$100K - $200K').", max_length=100, null=True)),
                ('description', models.TextField(help_text='Detailed job description.')),
                ('short_description', models.TextField(help_text='Short summary of the job (max 200 characters).', validators=[django.core.validators.MaxLengthValidator(200)])),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Job post creation date.')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp of the last update.')),
                ('category', models.ForeignKey(help_text='Category of the job post.', on_delete=django.db.models.deletion.CASCADE, related_name='job_posts', to='realtimejobs.category')),
                ('company', models.ForeignKey(help_text='Company offering the job.', on_delete=django.db.models.deletion.CASCADE, related_name='job_posts', to='realtimejobs.company')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='job_posts', to=settings.AUTH_USER_MODEL)),
                ('job_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='realtimejobs.jobtype')),
                ('tags', models.ManyToManyField(blank=True, help_text='Tags associated with this job.', related_name='job_posts', to='realtimejobs.tag')),
            ],
        ),
        migrations.CreateModel(
            name='JobInteraction',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('saved', 'Saved'), ('applied', 'Applied')], db_index=True, help_text='Interaction type (saved or applied).', max_length=10)),
                ('timestamp', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Time when the interaction occurred.')),
                ('user', models.ForeignKey(help_text='User who interacted with the job.', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('job', models.ForeignKey(help_text='The job post the user interacted with.', on_delete=django.db.models.deletion.CASCADE, to='realtimejobs.jobpost')),
            ],
            options={
                'indexes': [models.Index(fields=['user', 'status'], name='realtimejob_user_id_86a108_idx'), models.Index(fields=['user', 'job'], name='realtimejob_user_id_1ab645_idx'), models.Index(fields=['job', 'status'], name='realtimejob_job_id_494832_idx')],
                'constraints': [models.UniqueConstraint(fields=('user', 'job', 'status'), name='unique_user_job_status')],
            },
        ),
        migrations.CreateModel(
            name='JobAlert',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(db_index=True, help_text="User's email for receiving alerts.", max_length=254)),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Indicates if the alert is active.')),
                ('location', models.CharField(blank=True, db_index=True, help_text='Preferred job location.', max_length=255, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when the alert was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp of the last update.')),
                ('categories', models.ManyToManyField(blank=True, help_text='Selected job categories for alerts.', to='realtimejobs.category')),
                ('user', models.ForeignKey(help_text='User who set up the job alert.', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('job_types', models.ManyToManyField(blank=True, help_text='Selected job types for alerts.', to='realtimejobs.jobtype')),
            ],
            options={
                'indexes': [models.Index(fields=['user', 'is_active'], name='realtimejob_user_id_cf7f8a_idx'), models.Index(fields=['location'], name='realtimejob_locatio_e826d6_idx')],
                'constraints': [models.UniqueConstraint(fields=('user',), name='unique_user_job_alert')],
            },
        ),
    ]
